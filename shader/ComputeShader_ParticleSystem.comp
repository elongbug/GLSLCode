#version 430 compatibility

layout( std140, binding=4 ) buffer Pos 
{
vec4 Positions[ ];  // array of vec4 structures
};
layout( std140, binding=5 ) buffer Vel 
{
vec4 Velocities[ ]; // array of vec4 structures
};
layout( std140, binding=5 ) buffer Col
{
vec4 Colors[ ];  // array of structures
};
layout( local_size_x = 128, local_size_y = 1, local_size_z = 1 ) in;
const vec3 G = vec3( 0., -9.8, 0. );
const float DT = 0.001;
#if Bounch
void main(){
	uint gid = gl_GlobalInvocationID.x; // the .y and .z are both 1
	vec3 p = Positions[ gid ].xyz;
	vec3 v = Velocities[ gid ].xyz;
	vec3 pp = p + v*DT + .5*DT*DT*G;
	vec3 vp = v + G*DT;
	Positions[ gid ].xyz = pp;
	Velocities[ gid ].xyz = vp;
}
#else
const vec4 SPHERE = vec4(0.0,0.0,0.0,600); // x,y,z,r

vec3 Bounce(vec3 vin, vec3 n)
{
	vec3 vout = reflect(vin,n);
	return vout;
}

vec3 BounceSphere(vec3 p, vec3 v, vec4 s)
{
	vec3 n = normalize(p-s.xyz);
	return Bounce(v,n);
}

bool IsInsideSphere(vec3 p, vec4 s)
{
	float r = length(p-s.xyz);
	return (r < s.w);
}

void main(){
	uint gid = gl_GlobalInvocationID.x; // the .y and .z are both 1
	vec3 p = Positions[ gid ].xyz;
	vec3 v = Velocities[ gid ].xyz;
	vec3 pp = p + v*DT + .5*DT*DT*G;
	vec3 vp = v + G*DT;

	if(IsInsideSphere(pp, SPHERE))
	{
		vp = BounceSphere(p, v, SPHERE);
		pp = p + vp*DT + .5*DT*DT*G;

	}
	Positions[ gid ].xyz = pp;
	Velocities[ gid ].xyz = vp;
}
